program point_math.aleo;

record Point:
    owner as address.private;
    x as u32.private;
    y as u32.private;

function create_point:
    input r0 as u32.private;
    input r1 as u32.private;
    cast self.caller r0 r1 into r2 as Point.record;
    output r2 as Point.record;

function add_points:
    input r0 as Point.record;
    input r1 as Point.record;
    add r0.x r1.x into r2;
    add r0.y r1.y into r3;
    cast r0.owner r2 r3 into r4 as Point.record;
    output r4 as Point.record;

closure sqrt_bitwise:
    input r0 as u32;
    sub 31u8 0u8 into r1;
    shl 1u32 r1 into r2;
    or 0u32 r2 into r3;
    lte r3 65535u32 into r4;
    mul.w r3 r3 into r5;
    lte r5 r0 into r6;
    ternary r6 r3 0u32 into r7;
    ternary r4 r7 0u32 into r8;
    sub 31u8 1u8 into r9;
    shl 1u32 r9 into r10;
    or r8 r10 into r11;
    lte r11 65535u32 into r12;
    mul.w r11 r11 into r13;
    lte r13 r0 into r14;
    ternary r14 r11 r8 into r15;
    ternary r12 r15 r8 into r16;
    sub 31u8 2u8 into r17;
    shl 1u32 r17 into r18;
    or r16 r18 into r19;
    lte r19 65535u32 into r20;
    mul.w r19 r19 into r21;
    lte r21 r0 into r22;
    ternary r22 r19 r16 into r23;
    ternary r20 r23 r16 into r24;
    sub 31u8 3u8 into r25;
    shl 1u32 r25 into r26;
    or r24 r26 into r27;
    lte r27 65535u32 into r28;
    mul.w r27 r27 into r29;
    lte r29 r0 into r30;
    ternary r30 r27 r24 into r31;
    ternary r28 r31 r24 into r32;
    sub 31u8 4u8 into r33;
    shl 1u32 r33 into r34;
    or r32 r34 into r35;
    lte r35 65535u32 into r36;
    mul.w r35 r35 into r37;
    lte r37 r0 into r38;
    ternary r38 r35 r32 into r39;
    ternary r36 r39 r32 into r40;
    sub 31u8 5u8 into r41;
    shl 1u32 r41 into r42;
    or r40 r42 into r43;
    lte r43 65535u32 into r44;
    mul.w r43 r43 into r45;
    lte r45 r0 into r46;
    ternary r46 r43 r40 into r47;
    ternary r44 r47 r40 into r48;
    sub 31u8 6u8 into r49;
    shl 1u32 r49 into r50;
    or r48 r50 into r51;
    lte r51 65535u32 into r52;
    mul.w r51 r51 into r53;
    lte r53 r0 into r54;
    ternary r54 r51 r48 into r55;
    ternary r52 r55 r48 into r56;
    sub 31u8 7u8 into r57;
    shl 1u32 r57 into r58;
    or r56 r58 into r59;
    lte r59 65535u32 into r60;
    mul.w r59 r59 into r61;
    lte r61 r0 into r62;
    ternary r62 r59 r56 into r63;
    ternary r60 r63 r56 into r64;
    sub 31u8 8u8 into r65;
    shl 1u32 r65 into r66;
    or r64 r66 into r67;
    lte r67 65535u32 into r68;
    mul.w r67 r67 into r69;
    lte r69 r0 into r70;
    ternary r70 r67 r64 into r71;
    ternary r68 r71 r64 into r72;
    sub 31u8 9u8 into r73;
    shl 1u32 r73 into r74;
    or r72 r74 into r75;
    lte r75 65535u32 into r76;
    mul.w r75 r75 into r77;
    lte r77 r0 into r78;
    ternary r78 r75 r72 into r79;
    ternary r76 r79 r72 into r80;
    sub 31u8 10u8 into r81;
    shl 1u32 r81 into r82;
    or r80 r82 into r83;
    lte r83 65535u32 into r84;
    mul.w r83 r83 into r85;
    lte r85 r0 into r86;
    ternary r86 r83 r80 into r87;
    ternary r84 r87 r80 into r88;
    sub 31u8 11u8 into r89;
    shl 1u32 r89 into r90;
    or r88 r90 into r91;
    lte r91 65535u32 into r92;
    mul.w r91 r91 into r93;
    lte r93 r0 into r94;
    ternary r94 r91 r88 into r95;
    ternary r92 r95 r88 into r96;
    sub 31u8 12u8 into r97;
    shl 1u32 r97 into r98;
    or r96 r98 into r99;
    lte r99 65535u32 into r100;
    mul.w r99 r99 into r101;
    lte r101 r0 into r102;
    ternary r102 r99 r96 into r103;
    ternary r100 r103 r96 into r104;
    sub 31u8 13u8 into r105;
    shl 1u32 r105 into r106;
    or r104 r106 into r107;
    lte r107 65535u32 into r108;
    mul.w r107 r107 into r109;
    lte r109 r0 into r110;
    ternary r110 r107 r104 into r111;
    ternary r108 r111 r104 into r112;
    sub 31u8 14u8 into r113;
    shl 1u32 r113 into r114;
    or r112 r114 into r115;
    lte r115 65535u32 into r116;
    mul.w r115 r115 into r117;
    lte r117 r0 into r118;
    ternary r118 r115 r112 into r119;
    ternary r116 r119 r112 into r120;
    sub 31u8 15u8 into r121;
    shl 1u32 r121 into r122;
    or r120 r122 into r123;
    lte r123 65535u32 into r124;
    mul.w r123 r123 into r125;
    lte r125 r0 into r126;
    ternary r126 r123 r120 into r127;
    ternary r124 r127 r120 into r128;
    sub 31u8 16u8 into r129;
    shl 1u32 r129 into r130;
    or r128 r130 into r131;
    lte r131 65535u32 into r132;
    mul.w r131 r131 into r133;
    lte r133 r0 into r134;
    ternary r134 r131 r128 into r135;
    ternary r132 r135 r128 into r136;
    sub 31u8 17u8 into r137;
    shl 1u32 r137 into r138;
    or r136 r138 into r139;
    lte r139 65535u32 into r140;
    mul.w r139 r139 into r141;
    lte r141 r0 into r142;
    ternary r142 r139 r136 into r143;
    ternary r140 r143 r136 into r144;
    sub 31u8 18u8 into r145;
    shl 1u32 r145 into r146;
    or r144 r146 into r147;
    lte r147 65535u32 into r148;
    mul.w r147 r147 into r149;
    lte r149 r0 into r150;
    ternary r150 r147 r144 into r151;
    ternary r148 r151 r144 into r152;
    sub 31u8 19u8 into r153;
    shl 1u32 r153 into r154;
    or r152 r154 into r155;
    lte r155 65535u32 into r156;
    mul.w r155 r155 into r157;
    lte r157 r0 into r158;
    ternary r158 r155 r152 into r159;
    ternary r156 r159 r152 into r160;
    sub 31u8 20u8 into r161;
    shl 1u32 r161 into r162;
    or r160 r162 into r163;
    lte r163 65535u32 into r164;
    mul.w r163 r163 into r165;
    lte r165 r0 into r166;
    ternary r166 r163 r160 into r167;
    ternary r164 r167 r160 into r168;
    sub 31u8 21u8 into r169;
    shl 1u32 r169 into r170;
    or r168 r170 into r171;
    lte r171 65535u32 into r172;
    mul.w r171 r171 into r173;
    lte r173 r0 into r174;
    ternary r174 r171 r168 into r175;
    ternary r172 r175 r168 into r176;
    sub 31u8 22u8 into r177;
    shl 1u32 r177 into r178;
    or r176 r178 into r179;
    lte r179 65535u32 into r180;
    mul.w r179 r179 into r181;
    lte r181 r0 into r182;
    ternary r182 r179 r176 into r183;
    ternary r180 r183 r176 into r184;
    sub 31u8 23u8 into r185;
    shl 1u32 r185 into r186;
    or r184 r186 into r187;
    lte r187 65535u32 into r188;
    mul.w r187 r187 into r189;
    lte r189 r0 into r190;
    ternary r190 r187 r184 into r191;
    ternary r188 r191 r184 into r192;
    sub 31u8 24u8 into r193;
    shl 1u32 r193 into r194;
    or r192 r194 into r195;
    lte r195 65535u32 into r196;
    mul.w r195 r195 into r197;
    lte r197 r0 into r198;
    ternary r198 r195 r192 into r199;
    ternary r196 r199 r192 into r200;
    sub 31u8 25u8 into r201;
    shl 1u32 r201 into r202;
    or r200 r202 into r203;
    lte r203 65535u32 into r204;
    mul.w r203 r203 into r205;
    lte r205 r0 into r206;
    ternary r206 r203 r200 into r207;
    ternary r204 r207 r200 into r208;
    sub 31u8 26u8 into r209;
    shl 1u32 r209 into r210;
    or r208 r210 into r211;
    lte r211 65535u32 into r212;
    mul.w r211 r211 into r213;
    lte r213 r0 into r214;
    ternary r214 r211 r208 into r215;
    ternary r212 r215 r208 into r216;
    sub 31u8 27u8 into r217;
    shl 1u32 r217 into r218;
    or r216 r218 into r219;
    lte r219 65535u32 into r220;
    mul.w r219 r219 into r221;
    lte r221 r0 into r222;
    ternary r222 r219 r216 into r223;
    ternary r220 r223 r216 into r224;
    sub 31u8 28u8 into r225;
    shl 1u32 r225 into r226;
    or r224 r226 into r227;
    lte r227 65535u32 into r228;
    mul.w r227 r227 into r229;
    lte r229 r0 into r230;
    ternary r230 r227 r224 into r231;
    ternary r228 r231 r224 into r232;
    sub 31u8 29u8 into r233;
    shl 1u32 r233 into r234;
    or r232 r234 into r235;
    lte r235 65535u32 into r236;
    mul.w r235 r235 into r237;
    lte r237 r0 into r238;
    ternary r238 r235 r232 into r239;
    ternary r236 r239 r232 into r240;
    sub 31u8 30u8 into r241;
    shl 1u32 r241 into r242;
    or r240 r242 into r243;
    lte r243 65535u32 into r244;
    mul.w r243 r243 into r245;
    lte r245 r0 into r246;
    ternary r246 r243 r240 into r247;
    ternary r244 r247 r240 into r248;
    sub 31u8 31u8 into r249;
    shl 1u32 r249 into r250;
    or r248 r250 into r251;
    lte r251 65535u32 into r252;
    mul.w r251 r251 into r253;
    lte r253 r0 into r254;
    ternary r254 r251 r248 into r255;
    ternary r252 r255 r248 into r256;
    output r256 as u32;

function distance:
    input r0 as Point.record;
    input r1 as Point.record;
    cast r0.x into r2 as i64;
    cast r1.x into r3 as i64;
    sub r2 r3 into r4;
    abs r4 into r5;
    cast r5 into r6 as u32;
    cast r0.y into r7 as i64;
    cast r1.y into r8 as i64;
    sub r7 r8 into r9;
    abs r9 into r10;
    cast r10 into r11 as u32;
    mul r6 r6 into r12;
    mul r11 r11 into r13;
    add r12 r13 into r14;
    call sqrt_bitwise r14 into r15;
    output r15 as u32.private;
